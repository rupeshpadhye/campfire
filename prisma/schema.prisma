// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Event {
  id        Int     @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
  headerImage String?
  backgroundImage String?
  uniqueLink String?
  expiresAt DateTime?
  questions Question[]
  userResponses UserQuestionAnswers[]
  invites EventInvite[]
}

model Question {
    id        Int     @default(autoincrement()) @id
    event    Event   @relation(fields: [eventId], references: [id])
    eventId  Int
    title     String
    desc   String?
    videoData Json?
    userResponses UserQuestionAnswers[]
    @@index([eventId], name: "eventId")
    @@map(name: "questions")
}

model EventInvite {
  id        Int     @default(autoincrement()) @id
  event    Event   @relation(fields: [eventId], references: [id])
  eventId  Int  
  email   String
  status  String
  @@index([eventId], name: "eventId")
  @@map(name: "eventInvites")
}

model UserQuestionAnswers {
  id        Int     @default(autoincrement()) @id
  event    Event   @relation(fields: [eventId], references: [id])
  eventId  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  question    Question   @relation(fields: [questionId], references: [id])
  questionId  Int
  videoResponseLink    String
  @@index([userId], name: "userId")
  @@index([eventId], name: "eventId")
  @@map(name: "user_question_answers")

}


model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  events        Event[]
  role          String  @default("member")
  assingedEvents UserQuestionAnswers[]
  membershipManager  Members[] @relation("membershipManager")
  members Members[] @relation("user")
  @@map(name: "users")
}


model Members {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("user", fields: [userId], references: [id])
  userId     Int
  createdBy   User     @relation("membershipManager", fields: [createdById], references: [id])
  createdById Int
  @@index([createdById], name: "createdById")
  @@unique([userId, createdById], name: "membership")

  @@map(name: "members")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id           Int      @default(autoincrement()) @id
  identifier   String   
  expires      DateTime
  token        String   @unique @map(name: "token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  @@index([token], name: "token")
  @@map(name: "verification_requests")
}

model PendingUser {
  id           Int      @default(autoincrement()) @id
  email        String   @unique @map(name: "email")
  name         String
  company      String
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "pending_users")
}